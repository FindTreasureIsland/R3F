import { Canvas, useFrame, useThree } from '@react-three/fiber'
import { OrbitControls, useGLTF, useAnimations } from '@react-three/drei'
import { Suspense, useEffect, useRef, useState } from 'react'
import { LoopRepeat, Vector3, Euler } from 'three'
import { InfoPanel } from './components/InfoPanel'
import './App.css'

function BackgroundMusic() {
  const [isPlaying, setIsPlaying] = useState<boolean>(true)
  const audioRef = useRef<HTMLAudioElement>(null)
  const fadeInterval = useRef<ReturnType<typeof setTimeout> | undefined>(undefined)

  // Èü≥ÈáèÊ∏êÂèòÂáΩÊï∞
  const fadeVolume = (start: number, end: number, duration: number) => {
    if (!audioRef.current) return

    const audio = audioRef.current
    const steps = 20 // Ê∏êÂèòÊ≠•È™§Êï∞
    const stepTime = duration / steps
    const volumeStep = (end - start) / steps
    
    let currentStep = 0
    
    // Ê∏ÖÈô§‰πãÂâçÁöÑÊ∏êÂèò
    if (fadeInterval.current) {
      clearInterval(fadeInterval.current)
    }

    audio.volume = start
    
    fadeInterval.current = setInterval(() => {
      currentStep++
      const newVolume = start + volumeStep * currentStep
      
      if (currentStep >= steps) {
        audio.volume = end
        if (fadeInterval.current) {
          clearInterval(fadeInterval.current)
        }
        if (end === 0) {
          audio.pause()
        }
        return
      }
      
      audio.volume = newVolume
    }, stepTime)
  }

  useEffect(() => {
    const playAudio = async () => {
      if (audioRef.current) {
        try {
          audioRef.current.volume = 0
          await audioRef.current.play()
          fadeVolume(0, 0.5, 2000) // 2ÁßíÊ∑°ÂÖ•
        } catch {
          console.log('Auto-play was prevented. Please click to start playing.')
          setIsPlaying(false)
        }
      }
    }

    playAudio()

    // Ê∏ÖÁêÜÂáΩÊï∞
    return () => {
      if (fadeInterval.current) {
        clearInterval(fadeInterval.current)
      }
    }
  }, [])

  useEffect(() => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.play().then(() => {
          fadeVolume(0, 0.5, 1000) // 1ÁßíÊ∑°ÂÖ•
        }).catch(() => {
          setIsPlaying(false)
        })
      } else {
        fadeVolume(audioRef.current.volume, 0, 1000) // 1ÁßíÊ∑°Âá∫
      }
    }
  }, [isPlaying])

  return (
    <>
      <audio ref={audioRef} src="/backsound.mp3" loop preload="auto" />
      <button
        onClick={() => setIsPlaying(!isPlaying)}
        style={{
          position: 'fixed',
          bottom: '20px',
          right: '20px',
          padding: '10px 20px',
          backgroundColor: isPlaying ? '#4CAF50' : '#f44336',
          color: 'white',
          border: 'none',
          borderRadius: '5px',
          cursor: 'pointer',
          zIndex: 1000,
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
        }}
      >
        {isPlaying ? (
          <>
            <span style={{ fontSize: '20px' }}>üîä</span>
            Èü≥‰πêÂºÄÂêØ
          </>
        ) : (
          <>
            <span style={{ fontSize: '20px' }}>üîá</span>
            Èü≥‰πêÂÖ≥Èó≠
          </>
        )}
      </button>
    </>
  )
}

interface ModelProps {
  onInfoUpdate: (info: { position: Vector3; rotation: Euler; scale: Vector3 }) => void;
}

function Model({ onInfoUpdate }: ModelProps) {
  const { scene, animations } = useGLTF('/models/spaceship.glb')
  const { actions } = useAnimations(animations, scene)

  useEffect(() => {
    scene.scale.set(0.02, 0.02, 0.02)
    scene.rotation.y = Math.PI / 500
    scene.rotation.x = Math.PI / 1000
    scene.rotation.z = Math.PI / 200
    
    Object.values(actions).forEach(action => {
      if (action) {
        action.play()
        action.setLoop(LoopRepeat, Infinity)
      }
    })
  }, [actions, scene])

  useFrame(() => {
    onInfoUpdate({
      position: scene.position,
      rotation: scene.rotation,
      scale: scene.scale
    })
  })

  return <primitive object={scene} position={[6, -1, -15]} />
}

function SceneInfo() {
  const [modelInfo, setModelInfo] = useState({
    position: new Vector3(6, -1, -15),
    rotation: new Euler(0, 0, 0),
    scale: new Vector3(0.02, 0.02, 0.02)
  })
  const [cameraInfo, setCameraInfo] = useState({
    position: new Vector3(0, 2, 12)
  })
  const { camera } = useThree()

  useFrame(() => {
    setCameraInfo({
      position: camera.position.clone()
    })
  })

  return (
    <>
      <Model onInfoUpdate={setModelInfo} />
      <InfoPanel modelInfo={modelInfo} cameraInfo={cameraInfo} />
    </>
  )
}

function BlackHoleEffect() {
  return (
    <>
      <pointLight position={[-8, 0, 0]} intensity={10} distance={10} color="#ffffff" />
      <pointLight position={[-8, 0, 0]} intensity={500} distance={10} color="#ffffff" />
      <pointLight position={[-8, 2, 0]} intensity={500} distance={20} color="#ffffff" />
      <pointLight position={[-8, -2, 0]} intensity={200} distance={20} color="#ffffff" />
      <pointLight position={[-7, 1, 0]} intensity={150} distance={15} color="#ffffff" />
      <pointLight position={[-7, -1, 0]} intensity={150} distance={15} color="#ffffff" />
      <pointLight position={[-9, 0, 0]} intensity={150} distance={15} color="#ffffff" />
    </>
  )
}

function Lights() {
  return (
    <>
      <ambientLight intensity={0.2} />
      <directionalLight position={[5, 5, 5]} intensity={1} castShadow />
      <directionalLight position={[-5, 3, 0]} intensity={1} />
      <BlackHoleEffect />
    </>
  )
}

function App() {
  return (
    <div className="scene-container">
      <BackgroundMusic />
      <Canvas
        style={{ width: '100%', height: '100%' }}
        camera={{ 
          position: [0, 2, 12],
          fov: 45,
        }}
      >
        <color attach="background" args={['#000000']} />
        <fog attach="fog" args={['#000000',10, 100]} />
        <Lights />
        <Suspense fallback={null}>
          <SceneInfo />
        </Suspense>
        <OrbitControls 
          enableZoom={true}
          enablePan={true}
          minDistance={5}
          maxDistance={20}
          zoomSpeed={0.5}
          panSpeed={0.8}
          minPolarAngle={0}
          maxPolarAngle={Math.PI}
        />
      </Canvas>
    </div>
  )
}

export default App

useGLTF.preload('/models/spaceship.glb') 